focal_cols = c("dantlog"),
opposite_cols = c("dantlog"))
randBoot <- function(data, dyad_id_col, model_formula,
model_type = "lm", family = NULL,
n_bootstraps = 1000,
focal_cols, opposite_cols,
RE_formula = NULL, control = NULL,
max_iterations = 10000, # New parameter
max_time_seconds = 3600) { # New parameter: max execution time in seconds
start_time <- Sys.time() # Record the starting time
# Ensure the car package is loaded
if (!requireNamespace("car", quietly = TRUE)) {
stop("The 'car' package is required for Anova analysis. Please install it using install.packages('car').")
}
# Check for valid focal_cols and opposite_cols
if (!all(focal_cols %in% colnames(data))) {
stop("Some of the focal_cols are not found in the provided data.")
}
if (!all(opposite_cols %in% colnames(data))) {
stop("Some of the opposite_cols are not found in the provided data.")
}
# Split data by dyad
dyad_groups <- split(data, data[[dyad_id_col]])
# Function to create focal and opposite data
create_focal_opposite_data <- function(dyad_groups) {
focal_opposite_data_list <- lapply(dyad_groups, function(dyad) {
# Shuffle dyad members to randomly assign roles
shuffled_dyad <- dyad[sample(1:2), ]
# Create a new data frame with 'focal' and 'opposite' columns
focal_data <- shuffled_dyad[1, , drop = FALSE]
colnames(focal_data) <- paste0("focal_", colnames(focal_data))
opposite_data <- shuffled_dyad[2, , drop = FALSE]
colnames(opposite_data) <- paste0("opposite_", colnames(opposite_data))
# Combine the data into a single row
combined_data <- cbind(focal_data, opposite_data)
return(combined_data)
})
# Combine all dyads back into a single data frame
focal_opposite_data <- do.call(rbind, focal_opposite_data_list)
return(focal_opposite_data)
}
# Bootstrap function
bootstrap_glmp <- function(dyad_groups, n_bootstraps = 1000) {
bootstrapped_results <- vector("list", length = n_bootstraps)
anova_results <- vector("list", length = n_bootstraps)
iteration_count <- 0 # Initialize the iteration counter
for (i in 1:n_bootstraps) {
# Check if maximum iterations or maximum time has been reached
iteration_count <- iteration_count + 1
if (iteration_count > max_iterations) {
stop("Maximum iteration limit reached.")
}
if (difftime(Sys.time(), start_time, units = "secs") > max_time_seconds) {
stop("Maximum execution time limit reached.")
}
focal_opposite_data <- create_focal_opposite_data(dyad_groups)
model <- NULL  # Reset the model object for each iteration
# Determine which model to run based on model_type
if (model_type == "lm") {
model <- lm(model_formula, data = focal_opposite_data)
} else if (model_type == "glm") {
if (is.null(family)) stop("Please specify a family for the glm model.")
model <- glm(model_formula, data = focal_opposite_data, family = family)
} else if (model_type == "lmer") {
if (!requireNamespace("lme4", quietly = TRUE)) {
stop("The 'lme4' package is required for mixed-effects models. Please install it using install.packages('lme4').")
}
if (is.null(RE_formula)) stop("Please specify random effects for the lmer model.")
full_formula <- update(model_formula, . ~ . + (RE_formula))
model <- lme4::lmer(full_formula, data = focal_opposite_data, control = control)
} else if (model_type == "glmer") {
if (!requireNamespace("lme4", quietly = TRUE)) {
stop("The 'lme4' package is required for mixed-effects models. Please install it using install.packages('lme4').")
}
if (is.null(family)) stop("Please specify a family for the glmer model.")
if (is.null(RE_formula)) stop("Please specify random effects for the glmer model.")
full_formula <- update(model_formula, . ~ . + (RE_formula))
model <- lme4::glmer(full_formula, data = focal_opposite_data, family = family, control = control)
} else {
stop("Invalid model_type specified. Choose 'lm', 'glm', 'lmer', or 'glmer'.")
}
if (!is.null(model)) {
bootstrapped_results[[i]] <- list(model = model, summary = summary(model))
anova_results[[i]] <- car::Anova(model)
}
}
return(list(bootstrap_results = bootstrapped_results, anova_results = anova_results))
}
return(bootstrap_glmp(dyad_groups, n_bootstraps))
}
model_formula <- focal_dantlog ~ focal_group
results <- randBoot(data = mydata,
dyad_id_col = "dyad_id",
model_formula = model_formula,
model_type = "lm",
n_bootstraps = 50,
focal_cols = c("dantlog"),
opposite_cols = c("dantlog"))
results$bootstrap_results
results$anova_results
anovaPvals <- function(anova_results) {
# Function to extract p-values from a single Anova result
get_pvalues <- function(anova_res) {
# Try to extract p-values from common column names
possible_columns <- c("Pr(>F)", "Pr(>Chisq)", "p.value")
pval_column <- intersect(colnames(anova_res), possible_columns)
if (length(pval_column) == 0) {
stop("Unable to find a column with p-values in the Anova result.")
}
return(anova_res[[pval_column]])
}
# Apply the function to each Anova result in the list
pvalues_list <- lapply(anova_results, get_pvalues)
return(pvalues_list)
}
anovaPvals(results$anova_results)
anovaPvals<- function(anova_results) {
# Function to extract p-values from a single Anova result
get_pvalues <- function(anova_res) {
# Try to extract p-values from common column names
possible_columns <- c("Pr(>F)", "Pr(>Chisq)", "p.value")
pval_column <- intersect(colnames(anova_res), possible_columns)
if (length(pval_column) == 0) {
stop("Unable to find a column with p-values in the Anova result.")
}
pvalues <- anova_res[[pval_column]]
return(pvalues[!is.na(pvalues)])  # Filter out NA values
}
# Apply the function to each Anova result in the list
pvalues_list <- lapply(anova_results, get_pvalues)
return(pvalues_list)
}
anovaPvals(results$anova_results)
pvals<-anovaPvals(results$anova_results)
plotBoot <- function(closest_data, num_var, cat_var, overall_means,
xlab_name = cat_var, ylab_name = num_var, main_title = NULL,
p_values = NULL) {
library(ggplot2)
library(ggdist)
library(RColorBrewer)
library(gridExtra) # For arranging multiple plots
# Convert the categorical variable to a factor
closest_data[[cat_var]] <- as.factor(closest_data[[cat_var]])
# Generate the Set2 color palette based on the number of levels
colours <- brewer.pal(n = length(unique(closest_data[[cat_var]])), name = "Set2")
# Raincloud plot
raincloud <- ggplot(closest_data, aes(x = get(cat_var), y = get(num_var))) +
... # rest of the raincloud plot code
# If p_values are provided, create a histogram
if (!is.null(p_values)) {
p_hist <- ggplot(data.frame(p_values = p_values), aes(x = p_values)) +
geom_histogram(fill = "skyblue", color = "white", bins = 30) +
labs(title = "Histogram of p-values", x = "p-value", y = "Frequency") +
theme_minimal()
# Combine the two plots using grid.arrange
combined_plot <- gridExtra::grid.arrange(raincloud, p_hist, ncol = 2)
return(combined_plot)
} else {
return(raincloud)
}
}
tryy<-plotBoot(rep_data$closest_data, "focal_dant", "opposite_group", overall_means = overall_means,
xlab_name = "Genotype Group", ylab_name = "Focal Duration of Antennal Contact", main_title = NULL,
p_values = pvals)
tryy<-plotBoot(rep_data$closest_data, "focal_dant", "opposite_group", overall_means = overall_means,
xlab_name = "Genotype Group", ylab_name = "Focal Duration of Antennal Contact", main_title = NULL, p_values = pvals)
plotBoot <- function(closest_data, num_var, cat_var, overall_means,
xlab_name = cat_var, ylab_name = num_var, main_title = NULL,
p_values = NULL) {
library(ggplot2)
library(ggdist)
library(RColorBrewer)
library(gridExtra) # For arranging multiple plots
# Convert the categorical variable to a factor
closest_data[[cat_var]] <- as.factor(closest_data[[cat_var]])
# Generate the Set2 color palette based on the number of levels
colours <- brewer.pal(n = length(unique(closest_data[[cat_var]])), name = "Set2")
# Raincloud plot
raincloud <- ggplot(closest_data, aes(x = get(cat_var), y = get(num_var))) +
ggdist::stat_halfeye(aes(fill = get(cat_var)), adjust = .5, width = .6, justification = -.2, .width = 0, point_colour = NA) +
geom_boxplot(aes(fill = get(cat_var)), width = .15, outlier.color = NA) +
ggdist::stat_dots(aes(fill = get(cat_var)), side = "left", justification = 1.12, binwidth = 1) +
geom_point(data = data.frame(cat = names(overall_means), mean = overall_means), aes(x = cat, y = mean), color = "black", size = 4, shape = 18) +
labs(title = main_title, x = xlab_name, y = ylab_name, fill = NULL) +
theme_gray() +
scale_fill_brewer(palette = "Set2")
# If p_values are provided, create a histogram
if (!is.null(p_values)) {
p_hist <- ggplot(data.frame(p_values = p_values), aes(x = p_values)) +
geom_histogram(fill = "skyblue", color = "white", bins = 30) +
labs(title = "Histogram of p-values", x = "p-value", y = "Frequency") +
theme_minimal()
# Combine the two plots using grid.arrange
combined_plot <- gridExtra::grid.arrange(raincloud, p_hist, ncol = 2)
return(combined_plot)
} else {
return(raincloud)
}
}
tryy<-plotBoot(rep_data$closest_data, "focal_dant", "opposite_group", overall_means = overall_means,
xlab_name = "Genotype Group", ylab_name = "Focal Duration of Antennal Contact", main_title = NULL, p_values = pvals)
tryy
tryy<-plotBoot(rep_data$closest_data, "focal_dant", "opposite_group", overall_means = overall_means,
xlab_name = "Genotype Group", ylab_name = "Focal Duration of Antennal Contact", main_title = NULL, p_values = pvals)
#' @examples
#' \dontrun{
#' data <- data.frame(dyad_id = rep(1:10, each = 2),
#'                    x = rnorm(20),
#'                    y = rnorm(20))
#' results <- randBoot(data, "dyad_id", y ~ x, model_type = "lm",
#'                     focal_cols = "x", opposite_cols = "y")
#' pvalues <- anovaPvals(results$anova_results, "opposite_group")
#' }
#' @export
anovaPvals <- function(anova_results, factor_name) {
# Function to extract p-values for a specific factor from a single Anova result
get_pvalues <- function(anova_res, factor_name) {
if (!(factor_name %in% rownames(anova_res))) {
stop(paste("The factor", factor_name, "was not found in the Anova result."))
}
# Extract p-values for the specified factor
possible_columns <- c("Pr(>F)", "Pr(>Chisq)", "p.value")
pval_column <- intersect(colnames(anova_res), possible_columns)
if (length(pval_column) == 0) {
stop("Unable to find a column with p-values in the Anova result.")
}
pvalue <- anova_res[factor_name, pval_column]
return(pvalue[!is.na(pvalue)])  # Filter out NA values
}
# Apply the function to each Anova result in the list
pvalues_list <- lapply(anova_results, get_pvalues, factor_name = factor_name)
return(pvalues_list)
}
pvals<-anovaPvals(results$anova_results, "oppposite_group")
results$anova_results
pvals<-anovaPvals(results$anova_results, "focal_group")
pvals
str(pvals)
head(pvals)
plotBoot <- function(closest_data, num_var, cat_var, overall_means,
xlab_name = cat_var, ylab_name = num_var, main_title = NULL,
p_values = NULL) {
library(ggplot2)
library(ggdist)
library(RColorBrewer)
library(gridExtra) # For arranging multiple plots
# Convert the categorical variable to a factor
closest_data[[cat_var]] <- as.factor(closest_data[[cat_var]])
# Generate the Set2 color palette based on the number of levels
colours <- brewer.pal(n = length(unique(closest_data[[cat_var]])), name = "Set2")
# Raincloud plot
raincloud <- ggplot(closest_data, aes(x = get(cat_var), y = get(num_var))) +
ggdist::stat_halfeye(
aes(fill = get(cat_var)),
adjust = .5,
width = .6,
justification = -.2,
.width = 0,
point_colour = NA
) +
geom_boxplot(
aes(fill = get(cat_var)),
width = .15,
outlier.color = NA
) +
ggdist::stat_dots(
aes(fill = get(cat_var)),
side = "left",
justification = 1.12,
binwidth = 1
) +
geom_point(data = data.frame(cat = names(overall_means), mean = overall_means),
aes(x = cat, y = mean), color = "black", size = 4, shape = 18) +
labs(title = main_title, x = xlab_name, y = ylab_name, fill = NULL) +
theme_gray() +
scale_fill_brewer(palette = "Set2") +
coord_cartesian(xlim = c(0.7, length(unique(closest_data[[cat_var]])) + 0.5))
# If p_values are provided, create a histogram
if (!is.null(p_values)) {
p_values_vector <- unlist(p_values) # Convert list to numeric vector
p_hist <- ggplot(data.frame(p_values = p_values_vector), aes(x = p_values)) +
geom_histogram(fill = "skyblue", color = "white", bins = 30) +
labs(title = "Histogram of p-values", x = "p-value", y = "Frequency") +
theme_minimal()
# Combine the two plots using grid.arrange
combined_plot <- gridExtra::grid.arrange(raincloud, p_hist, ncol = 2)
return(combined_plot)
} else {
return(raincloud)
}
}
tryy<-plotBoot(rep_data$closest_data, "focal_dant", "opposite_group", overall_means = overall_means,
xlab_name = "Genotype Group", ylab_name = "Focal Duration of Antennal Contact", main_title = NULL, p_values = pvals)
plotBoot <- function(closest_data, num_var, cat_var, overall_means,
xlab_name = cat_var, ylab_name = num_var, main_title = NULL,
p_values = NULL) {
library(ggplot2)
library(ggdist)
library(RColorBrewer)
library(cowplot) # For plot_grid function
# Convert the categorical variable to a factor
closest_data[[cat_var]] <- as.factor(closest_data[[cat_var]])
# Generate the Set2 color palette based on the number of levels
colours <- brewer.pal(n = length(unique(closest_data[[cat_var]])), name = "Set2")
# Raincloud plot
raincloud <- ggplot(closest_data, aes(x = get(cat_var), y = get(num_var))) +
ggdist::stat_halfeye(
aes(fill = get(cat_var)),
adjust = .5,
width = .6,
justification = -.2,
.width = 0,
point_colour = NA
) +
geom_boxplot(
aes(fill = get(cat_var)),
width = .15,
outlier.color = NA
) +
ggdist::stat_dots(
aes(fill = get(cat_var)),
side = "left",
justification = 1.12,
binwidth = 1
) +
geom_point(data = data.frame(cat = names(overall_means), mean = overall_means),
aes(x = cat, y = mean), color = "black", size = 4, shape = 18) +
labs(title = main_title, x = xlab_name, y = ylab_name, fill = NULL) +
theme_gray() +
scale_fill_brewer(palette = "Set2")
# If p_values are provided, create a histogram
if (!is.null(p_values)) {
p_values_vector <- unlist(p_values) # Convert list to numeric vector
p_hist <- ggplot(data.frame(p_values = p_values_vector), aes(x = p_values)) +
geom_histogram(fill = "skyblue", color = "white", bins = 30) +
labs(title = "Histogram of p-values", x = "p-value", y = "Frequency") +
theme_minimal()
# Combine the two plots using plot_grid
combined_plot <- cowplot::plot_grid(raincloud, p_hist, ncol = 2, rel_widths = c(2, 1))
return(combined_plot)
} else {
return(raincloud)
}
}
tryy<-plotBoot(rep_data$closest_data, "focal_dant", "opposite_group", overall_means = overall_means,
xlab_name = "Genotype Group", ylab_name = "Focal Duration of Antennal Contact", main_title = NULL, p_values = pvals)
tryy
plotBoot <- function(closest_data, num_var, cat_var, overall_means,
xlab_name = cat_var, ylab_name = num_var, main_title = NULL) {
library(ggplot2)
library(ggdist) # We'll need the ggdist package
library(RColorBrewer) # For the Set2 color palette
# Convert the categorical variable to a factor
closest_data[[cat_var]] <- as.factor(closest_data[[cat_var]])
# Generate the Set2 color palette based on the number of levels
colours <- brewer.pal(n = length(unique(closest_data[[cat_var]])), name = "Set2")
# Calculate dataset means for each level
dataset_means <- tapply(closest_data[[num_var]], closest_data[[cat_var]], mean, na.rm = TRUE)
# Calculate the number of unique levels
num_levels <- length(unique(closest_data[[cat_var]]))
# Plot the raincloud plot
p <- ggplot(closest_data, aes(x = get(cat_var), y = get(num_var))) +
ggdist::stat_halfeye(
aes(fill = get(cat_var)), # Move the fill aesthetic here
adjust = .5,
width = .6,
justification = -.2,
.width = 0,
point_colour = NA
) +
geom_boxplot(
aes(fill = get(cat_var)), # Add the fill aesthetic here
width = .15,
outlier.color = NA
) +
ggdist::stat_dots(
aes(fill = get(cat_var)), # Add the fill aesthetic here
side = "left",
justification = 1.12,
binwidth = 1
) +
geom_point(data = data.frame(cat = names(overall_means), mean = overall_means),
aes(x = cat, y = mean), color = "black", size = 4, shape = 18) + # Diamond shape for overall means
labs(title = main_title, x = xlab_name, y = ylab_name, fill = NULL) +
theme_gray() +
scale_fill_manual(values = colours) # Use Set2 color palette
# Generalized xlim values based on the number of groups
p + coord_cartesian(xlim = c(0.7, num_levels + 0.5))
}
plotBoot <- function(closest_data, num_var, cat_var, overall_means,
xlab_name = cat_var, ylab_name = num_var, main_title = NULL,
p_values = NULL) {
library(ggplot2)
library(ggdist)
library(RColorBrewer)
library(cowplot) # For plot_grid function
# Convert the categorical variable to a factor
closest_data[[cat_var]] <- as.factor(closest_data[[cat_var]])
# Generate the Set2 color palette based on the number of levels
colours <- brewer.pal(n = length(unique(closest_data[[cat_var]])), name = "Set2")
# Raincloud plot
raincloud <- ggplot(closest_data, aes(x = get(cat_var), y = get(num_var))) +
ggdist::stat_halfeye(
aes(fill = get(cat_var)),
adjust = .5,
width = .6,
justification = -.2,
.width = 0,
point_colour = NA
) +
geom_boxplot(
aes(fill = get(cat_var)),
width = .15,
outlier.color = NA
) +
ggdist::stat_dots(
aes(fill = get(cat_var)),
side = "left",
justification = 1.12,
binwidth = 1
) +
geom_point(data = data.frame(cat = names(overall_means), mean = overall_means),
aes(x = cat, y = mean), color = "black", size = 4, shape = 18) +
labs(title = main_title, x = xlab_name, y = ylab_name, fill = NULL) +
theme_gray() +
scale_fill_brewer(palette = "Set2")
# If p_values are provided, create a histogram
if (!is.null(p_values)) {
p_values_vector <- unlist(p_values) # Convert list to numeric vector
p_hist <- ggplot(data.frame(p_values = p_values_vector), aes(x = p_values)) +
geom_histogram(fill = "skyblue", color = "white", bins = 30) +
geom_vline(aes(xintercept = 0.05), color = "red", linetype = "dashed") + # Add the red dashed line at x=0.05
labs(title = "Histogram of p-values", x = "p-value", y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(size = 10, hjust = 0.5)) # Adjust the size and center the histogram title
# Combine the two plots using plot_grid
combined_plot <- cowplot::plot_grid(raincloud, p_hist, ncol = 2, rel_widths = c(2, 1))
return(combined_plot)
} else {
return(raincloud)
}
}
tryy<-plotBoot(rep_data$closest_data, "focal_dant", "opposite_group", overall_means = overall_means,
xlab_name = "Genotype Group", ylab_name = "Focal Duration of Antennal Contact", main_title = NULL, p_values = pvals)
tryy
plotBoot <- function(closest_data, num_var, cat_var, overall_means,
xlab_name = cat_var, ylab_name = num_var, main_title = NULL,
p_values = NULL) {
library(ggplot2)
library(ggdist)
library(RColorBrewer)
library(cowplot) # For plot_grid function
# Convert the categorical variable to a factor
closest_data[[cat_var]] <- as.factor(closest_data[[cat_var]])
# Generate the Set2 color palette based on the number of levels
colours <- brewer.pal(n = length(unique(closest_data[[cat_var]])), name = "Set2")
# Raincloud plot
raincloud <- ggplot(closest_data, aes(x = get(cat_var), y = get(num_var))) +
ggdist::stat_halfeye(
aes(fill = get(cat_var)),
adjust = .5,
width = .6,
justification = -.2,
.width = 0,
point_colour = NA
) +
geom_boxplot(
aes(fill = get(cat_var)),
width = .15,
outlier.color = NA
) +
ggdist::stat_dots(
aes(fill = get(cat_var)),
side = "left",
justification = 1.12,
binwidth = 1
) +
geom_point(data = data.frame(cat = names(overall_means), mean = overall_means),
aes(x = cat, y = mean), color = "black", size = 4, shape = 18) +
labs(title = main_title, x = xlab_name, y = ylab_name, fill = NULL) +
theme_minimal() +
scale_fill_brewer(palette = "Set2")
# If p_values are provided, create a histogram
if (!is.null(p_values)) {
p_values_vector <- unlist(p_values) # Convert list to numeric vector
p_hist <- ggplot(data.frame(p_values = p_values_vector), aes(x = p_values)) +
geom_histogram(fill = "skyblue", color = "white", bins = 30) +
geom_vline(aes(xintercept = 0.05), color = "red", linetype = "dashed") + # Add the red dashed line at x=0.05
labs(title = "Histogram of p-values", x = "p-value", y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(size = 10, hjust = 0.5)) # Adjust the size and center the histogram title
# Combine the two plots using plot_grid
combined_plot <- cowplot::plot_grid(raincloud, p_hist, ncol = 2, rel_widths = c(2, 1))
return(combined_plot)
} else {
return(raincloud)
}
}
tryy<-plotBoot(rep_data$closest_data, "focal_dant", "opposite_group", overall_means = overall_means,
xlab_name = "Genotype Group", ylab_name = "Focal Duration of Antennal Contact", main_title = NULL, p_values = pvals)
tryy
overall_means<-MeanOfMeans(rep_data$each_dataset_means)
overall_means
rep_data$closest_data
rep_data$each_dataset_means
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::install()
